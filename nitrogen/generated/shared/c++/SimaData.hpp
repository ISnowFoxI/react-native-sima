///
/// SimaData.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif



#include <string>

namespace margelo::nitro::sima {

  /**
   * A struct which can be represented as a JavaScript object (SimaData).
   */
  struct SimaData {
  public:
    std::string serviceName     SWIFT_PRIVATE;
    std::string appScheme     SWIFT_PRIVATE;
    std::string userPinCode     SWIFT_PRIVATE;
    std::string logo     SWIFT_PRIVATE;
    double clientId     SWIFT_PRIVATE;
    std::string masterKey     SWIFT_PRIVATE;

  public:
    SimaData() = default;
    explicit SimaData(std::string serviceName, std::string appScheme, std::string userPinCode, std::string logo, double clientId, std::string masterKey): serviceName(serviceName), appScheme(appScheme), userPinCode(userPinCode), logo(logo), clientId(clientId), masterKey(masterKey) {}
  };

} // namespace margelo::nitro::sima

namespace margelo::nitro {

  using namespace margelo::nitro::sima;

  // C++ SimaData <> JS SimaData (object)
  template <>
  struct JSIConverter<SimaData> final {
    static inline SimaData fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return SimaData(
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "serviceName")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "appScheme")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "userPinCode")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "logo")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "clientId")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "masterKey"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const SimaData& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "serviceName", JSIConverter<std::string>::toJSI(runtime, arg.serviceName));
      obj.setProperty(runtime, "appScheme", JSIConverter<std::string>::toJSI(runtime, arg.appScheme));
      obj.setProperty(runtime, "userPinCode", JSIConverter<std::string>::toJSI(runtime, arg.userPinCode));
      obj.setProperty(runtime, "logo", JSIConverter<std::string>::toJSI(runtime, arg.logo));
      obj.setProperty(runtime, "clientId", JSIConverter<double>::toJSI(runtime, arg.clientId));
      obj.setProperty(runtime, "masterKey", JSIConverter<std::string>::toJSI(runtime, arg.masterKey));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "serviceName"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "appScheme"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "userPinCode"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "logo"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "clientId"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "masterKey"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
