///
/// HybridSimaSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridSimaSpec``
public protocol HybridSimaSpec_protocol: HybridObject {
  // Properties
  

  // Methods
  func startSimaAuth(data: SimaData) throws -> Promise<String>
}

/// See ``HybridSimaSpec``
public class HybridSimaSpec_base {
  private weak var cxxWrapper: HybridSimaSpec_cxx? = nil
  public func getCxxWrapper() -> HybridSimaSpec_cxx {
  #if DEBUG
    guard self is HybridSimaSpec else {
      fatalError("`self` is not a `HybridSimaSpec`! Did you accidentally inherit from `HybridSimaSpec_base` instead of `HybridSimaSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridSimaSpec_cxx(self as! HybridSimaSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the Sima HybridObject.
 * Implement this protocol to create Swift-based instances of Sima.
 * ```swift
 * class HybridSima : HybridSimaSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridSimaSpec = HybridSimaSpec_protocol & HybridSimaSpec_base
